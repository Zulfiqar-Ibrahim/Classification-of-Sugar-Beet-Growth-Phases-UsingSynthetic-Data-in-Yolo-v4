# -*- coding: utf-8 -*-
"""My_project_test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mSoQG41YXOMe_j93EW6T96Dns24Q30E-
"""

import cv2 as cv
import numpy as np
import os
from matplotlib import pyplot as plt
from pathlib import Path
import imutils
import re

class boundingBoxGenerator:
    
    def __init__(self,folderName_segmented_images,folderName_normal_images):
        self.folderName_segmented_images=folderName_segmented_images
        self.folderName_normal_images=folderName_normal_images
        self.list_of_seg_images=os.listdir(self.folderName_segmented_images)
        self.list_of_norm_images=os.listdir(self.folderName_normal_images)
        self.kernel = np.ones((5,5), np.uint8)
        
        self.images=[]
    def change_bgr2rgb(self,image):
        rgb_im = cv.cvtColor(image, cv.COLOR_BGR2RGB)
        return rgb_im
    def boundingBoxGenerator_from_files(self):
        
        cX=cY=x=y=w=h=0
        
        for itr in range(0,len(self.list_of_seg_images)-1):
            

            img=cv.imread(os.path.join(self.folderName_segmented_images,self.list_of_seg_images[itr]))
            img=self.change_bgr2rgb(img)
            name_of_img=self.list_of_seg_images[itr]
            name_of_orignal_image=name_of_img[:0] + '1' + name_of_img[1:]
            index=self.list_of_norm_images.index(name_of_orignal_image)
            img_org=cv.imread(os.path.join(self.folderName_normal_images,self.list_of_norm_images[index]))
            img_org=self.change_bgr2rgb(img_org)
            gray_img=cv.cvtColor(img,cv.COLOR_BGR2GRAY)
            (thresh, im_bw) = cv.threshold(gray_img, 128, 255, cv.THRESH_BINARY | cv.THRESH_OTSU)
            im_bw = cv.threshold(gray_img, thresh, 255, cv.THRESH_BINARY)[1]
            img_dilation = cv.dilate(im_bw, self.kernel, iterations=5)
            cnts = cv.findContours(img_dilation.copy(), cv.RETR_EXTERNAL,cv.CHAIN_APPROX_SIMPLE)
            cnts = imutils.grab_contours(cnts)
        
            if len(cnts)<2:
                print('number of contours= ',len(cnts))

                for c in cnts:
                    area=cv.contourArea(c)
                    print('Area = ',area)
                    M = cv.moments(c)
                    cX = int(M["m10"] / M["m00"])
                    cY = int(M["m01"] / M["m00"])
                    print(cX,cY)

                    #cv.circle(img_org, (cX, cY), 5, (255, 255, 255), 3)
                    rect = cv.boundingRect(c)
                    x,y,w,h = rect

                    cv.rectangle(img_org,(x,y),(x+w,y+h),(255,255,255),2)

                    plt.imshow(img_org)
                    plt.show()
                    img_org=self.change_bgr2rgb(img_org)
                    img_width,img_height,channel=img_org.shape
                    cX=cX/img_width
                    cY=cY/img_height
                    w=w/img_width
                    h=h/img_height
                    cX=str(cX)
                    cY=str(cY)
                    w=str(w)
                    h=str(h)

                    cv.imwrite(os.getcwd()+"/Labled_original_images_stage_5_2/"+name_of_orignal_image,img_org)
                    text_file_name=name_of_orignal_image.split('.')
                    text_file_name=text_file_name[0]+'.'+text_file_name[1]+'.txt'
                    print('Text file name = ',text_file_name)
                    with open(os.getcwd()+"/Labled_original_images_stage_5_2/"+text_file_name, 'w') as fh:
                        fh.write('4')
                        fh.write(' ')
                        fh.write(cX)
                        fh.write(' ')
                        fh.write(cY)
                        fh.write(' ')
                        fh.write(w)
                        fh.write(' ')
                        fh.write(h)

            else:
                continue
        
        return 0

obj1=boundingBoxGenerator('sugar_beet_red_black_stage_5_2','sugar_beet_normal_stage_5_2')
obj1.boundingBoxGenerator_from_files()

